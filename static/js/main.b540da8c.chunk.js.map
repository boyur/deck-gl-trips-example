{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DATA_URL","LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","App","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","inherits","createClass","key","value","_animate","_animationFrame","window","cancelAnimationFrame","_this$props","_this$props$loopLengt","loopLength","_this$props$animation","animationSpeed","timestamp","Date","now","loopTime","setState","requestAnimationFrame","bind","TripsLayer","id","data","getPath","d","segments","getColor","vendor","opacity","strokeWidth","trailLength","currentTime","PolygonLayer","extruded","wireframe","fp64","getPolygon","f","polygon","getElevation","height","getFillColor","lightSettings","_this$props2","viewState","_this$props2$controll","controller","_this$props2$baseMap","baseMap","react_default","a","createElement","dist_esm","layers","_renderLayers","initialViewState","esm","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","process","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAOMA,EAEF,kGAFEA,EAIF,8FAGEC,EAAiB,CACrBC,eAAgB,EAAE,MAAO,KAAM,KAAO,KAAM,GAAI,KAChDC,aAAc,IACdC,aAAc,GACdC,cAAe,GACfC,eAAgB,CAAC,EAAK,EAAK,EAAK,GAChCC,eAAgB,GAGLC,EAAqB,CAChCC,WAAY,GACZC,SAAU,MACVC,KAAM,GACNC,QAAS,GACTC,MAAO,GACPC,QAAS,GAqFIC,EAlFf,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GAHSR,EADrB,OAAAC,OAAAQ,EAAA,EAAAR,CAAAJ,EAAAC,GAAAG,OAAAS,EAAA,EAAAT,CAAAJ,EAAA,EAAAc,IAAA,oBAAAC,MAAA,WASIT,KAAKU,aATT,CAAAF,IAAA,uBAAAC,MAAA,WAaQT,KAAKW,iBACPC,OAAOC,qBAAqBb,KAAKW,mBAdvC,CAAAH,IAAA,WAAAC,MAAA,WAkBa,IAAAK,EAILd,KAAKJ,MAJAmB,EAAAD,EAEPE,kBAFO,IAAAD,EAEM,KAFNA,EAAAE,EAAAH,EAGPI,sBAHO,IAAAD,EAGU,GAHVA,EAKHE,EAAYC,KAAKC,MAAQ,IACzBC,EAAWN,EAAaE,EAE9BlB,KAAKuB,SAAS,CACZlB,KAAQc,EAAYG,EAAYA,EAAYN,IAE9ChB,KAAKW,gBAAkBC,OAAOY,sBAAsBxB,KAAKU,SAASe,KAAKzB,SA7B3E,CAAAQ,IAAA,gBAAAC,MAAA,WAiCI,MAAO,CACL,IAAIiB,IAAW,CACbC,GAAI,QACJC,KAAMjD,EACNkD,QAAS,SAAAC,GAAC,OAAIA,EAAEC,UAChBC,SAAU,SAAAF,GAAC,OAAkB,IAAbA,EAAEG,OAAe,CAAC,IAAK,IAAK,IAAM,CAAC,GAAI,IAAK,MAC5DC,QAAS,GACTC,YAAa,EACbC,YAAa,IACbC,YAAarC,KAAKI,MAAMC,OAE1B,IAAIiC,IAAa,CACfX,GAAI,YACJC,KAAMjD,EACN4D,UAAU,EACVC,WAAW,EACXC,MAAM,EACNP,QAAS,GACTQ,WAAY,SAAAC,GAAC,OAAIA,EAAEC,SACnBC,aAAc,SAAAF,GAAC,OAAIA,EAAEG,QACrBC,aAAc,CAAC,GAAI,GAAI,KACvBC,cAAepE,OAtDvB,CAAA4B,IAAA,SAAAC,MAAA,WA2DW,IAAAwC,EACgDjD,KAAKJ,MAArDsD,EADAD,EACAC,UADAC,EAAAF,EACWG,kBADX,IAAAD,KAAAE,EAAAJ,EAC8BK,eAD9B,IAAAD,KAGP,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,OAAQ3D,KAAK4D,gBACbC,iBAAkB1E,EAClB+D,UAAWA,EACXE,WAAYA,GAEXE,GACCC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,WAAS,EACTC,SAAS,2DACTC,qBAAqB,EACrBC,qBAAsBC,4GA1ElCzE,EAAA,CAAyB0E,aCpBLC,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b540da8c.chunk.js","sourcesContent":["/* global window */\nimport React, {Component} from 'react';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL, { PolygonLayer } from 'deck.gl';\nimport { TripsLayer } from '@deck.gl/experimental-layers';\n\n// Source data CSV\nconst DATA_URL = {\n  BUILDINGS:\n    'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n  TRIPS:\n    'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips.json' // eslint-disable-line\n};\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [-74.05, 40.7, 8000, -73.5, 41, 5000],\n  ambientRatio: 0.05,\n  diffuseRatio: 0.6,\n  specularRatio: 0.8,\n  lightsStrength: [2.0, 0.0, 0.0, 0.0],\n  numberOfLights: 2\n};\n\nexport const INITIAL_VIEW_STATE = {\n  longitude: -74,\n  latitude: 40.710,\n  zoom: 14,\n  maxZoom: 16,\n  pitch: 45,\n  bearing: 0\n};\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0\n    };\n  }\n\n  componentDidMount() {\n    this._animate();\n  }\n\n  componentWillUnmount() {\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n    }\n  }\n\n  _animate() {\n    const {\n      loopLength = 1800, // unit corresponds to the timestamp in source data\n      animationSpeed = 30 // unit time per second\n    } = this.props;\n    const timestamp = Date.now() / 1000;\n    const loopTime = loopLength / animationSpeed;\n\n    this.setState({\n      time: ((timestamp % loopTime) / loopTime) * loopLength\n    });\n    this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\n  }\n\n  _renderLayers() {\n    return [\n      new TripsLayer({\n        id: 'trips',\n        data: DATA_URL.TRIPS,\n        getPath: d => d.segments,\n        getColor: d => (d.vendor === 0 ? [253, 128, 93] : [23, 184, 190]),\n        opacity: 0.3,\n        strokeWidth: 2,\n        trailLength: 120,\n        currentTime: this.state.time\n      }),\n      new PolygonLayer({\n        id: 'buildings',\n        data: DATA_URL.BUILDINGS,\n        extruded: true,\n        wireframe: false,\n        fp64: true,\n        opacity: 0.3,\n        getPolygon: f => f.polygon,\n        getElevation: f => f.height,\n        getFillColor: [74, 80, 110],\n        lightSettings: LIGHT_SETTINGS\n      })\n    ];\n  }\n\n  render() {\n    const {viewState, controller = true, baseMap = true} = this.props;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers()}\n        initialViewState={INITIAL_VIEW_STATE}\n        viewState={viewState}\n        controller={controller}\n      >\n        {baseMap && (\n          <StaticMap\n            reuseMaps\n            mapStyle='mapbox://styles/martinproject1/cjnfxj6053wz32rq8r9sija4o'\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API_TOKEN}\n          />\n        )}\n      </DeckGL>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}